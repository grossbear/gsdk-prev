////////////////////////////////////////////////////////////////////////////////
// Application base class definition
////////////////////////////////////////////////////////////////////////////////

#include <memory.h>
#include <stdio.h>
#include "appbase.h"
#include "appwin.h"
#include "base/utils/strutils.h"
#include "base/utils/memutils.h"

ApplicationBase * ApplicationBase::app = NULL;
////////////////////////////////////////////////////////////////////////////////
ApplicationBase * ApplicationBase::GetSingleton()
{
    return app;
}

////////////////////////////////////////////////////////////////////////////////
ApplicationBase::~ApplicationBase()
{
    delete (window);
    window = NULL;
}

////////////////////////////////////////////////////////////////////////////////
ApplicationBase::ApplicationBase(const char * appName, const char * args):
appParams(args),
running(false),window(NULL)
{
    memutils::set(applicationName, 0, APP_NAME_SIZE);
    strutils::copy(applicationName, appName, APP_NAME_SIZE);
}

////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::Init()
{
    printf("AppBase Init\n");
    window = new AppWindow(100,100,400,400,0,"AppBase");
    running = window->WindowAvailable();
}

////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::Run()
{
    printf("AppBase Run\n");
    while(running)
    {
        window->ProcessEvents();
        this->Render();
    }
}

////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::Release()
{
    printf("AppBase Release\n");
}


////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::Render(){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::Draw(){}

////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::WindowSizeChanged(int w, int h){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::WindowPosChanged(int x, int y){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::WindowActiveChanged(bool active){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::WindowClosed()
{
    running = false;
}

////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::SetWindowSize(int w, int h){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::SetWindowPos(int x, int y){}

////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::KeyDown(unsigned char key){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::KeyUp(unsigned char key){}

////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::MouseMove(int x, int y){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::MouseMove(ButtonType btype, int x, int y){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::MouseButtonDown(ButtonType btype, int x, int y){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::MouseButtonUp(ButtonType btype, int x, int y){}
////////////////////////////////////////////////////////////////////////////////
void ApplicationBase::MouseButtonDblClk(ButtonType btype, int x, int y){}


////////////////////////////////////////////////////////////////////////////////
// Application parameters data
ApplicationBase::ApplicationParamsData::ApplicationParamsData(
const char * argsList):
paramsCount(0)
{
    memutils::set(params, 0, APP_MAX_PARAMS_STR_SIZE*sizeof(char));
    memutils::set(paramsPos, 0, APP_MAX_PARAMS_COUNT*sizeof(char));
    strutils::copy(params, argsList, APP_MAX_PARAMS_STR_SIZE);

    if(argsList==NULL) return;

    const char * argsptr = argsList;
    argsptr = strutils::find_not(argsptr, 0x20);

    int index = 0;
    while(argsptr)
    {
        paramsPos[paramsCount] = argsptr;
        paramsCount++;
        argsptr = strutils::find(argsptr, 0x20);
        argsptr = strutils::find_not(argsptr, 0x20); 
    }   
}

////////////////////////////////////////////////////////////////////////////////
const char * ApplicationBase::ApplicationParamsData::GetParam(uint pos)
{
    if(pos >= paramsCount) return NULL;
    return paramsPos[pos];
}

////////////////////////////////////////////////////////////////////////////////
uint ApplicationBase::ApplicationParamsData::GetParamsCount() const
{
    return paramsCount;
}

////////////////////////////////////////////////////////////////////////////////
