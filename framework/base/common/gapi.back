
/*
////////////////////////////////////////////////////////////////////////////////
class GraphicAPI
{
public:
    GraphicAPI(){}
    virtual ~GraphicAPI(){}

    virtual bool Create(const GAPICREATIONINFO *info) {return false;}
    virtual void Render() {}
    virtual void Resize(int width, int height) {}
    virtual bool SwapGraphicBuffers() {return false;}

    virtual void Clear(){}
    virtual void Clear(bool color, bool depth, bool stencil) {}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Device Caps
    virtual uint32t  GetDevCaps(GAPIDEVCAPSPARAM devparam){return 0;}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Scissor Setting Functions
    virtual void EnableScissorTest(bool flag){}
    virtual bool IsScissorTestEnabled(){return false;}
    virtual void SetScissorRect(int x, int y, int width, int height){}
    virtual void GetScissorRect(int scissor_box[4]){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Depth Setting Functions
    virtual void EnableDepthTest(bool flag){}
    virtual void EnableDepthWrite(bool flag){}
    virtual void SetDepthFunc(GAPIFUNC func){}
    virtual void SetClearDepth(float depth = 1.0f){}

    virtual bool IsDepthTestEnabled(){return false;}
    virtual bool IsDepthWriteEnabled(){return false;}
    virtual float GetClearDepth(){return 0.0f;}
    virtual GAPIFUNC GetDepthFunc(){return (GAPIFUNC)0;}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Stencil Setting Functions
    virtual void EnableStencilTest(bool flag){}
    virtual void SetStencilWriteMask(uint32t mask){}
    virtual bool IsStencilTestEnabled(){return false;}
    virtual void SetStencilFunc(GAPIFUNC func, uint32t ref, uint32t mask){}
    virtual void SetStencilOp(GAPIOP fail, GAPIOP zfail, GAPIOP pass){}
    virtual void EnableTwoSideStencil(bool flag){}
    virtual void SetClearStencil(uint32t val=0){}
    virtual bool IsTwoSideStencilEnabled(){return false;}

    virtual uint32t GetStencilWriteMask(){return 0;}
    virtual GAPIFUNC GetStencilFunc(){return (GAPIFUNC)0;}
    virtual uint32t GetStencilBits(){return 0;}
    virtual uint32t GetStencilClearVal(){return 0;}
    virtual uint32t GetStencilFuncMask(){return 0;}
    virtual uint32t GetStencilFuncRef(){return 0;}
    virtual GAPIOP  GetStencilOpFail(){return (GAPIOP)0;}
    virtual GAPIOP  GetStencilOpDepthFail(){return (GAPIOP)0;}
    virtual GAPIOP  GetStencilOpDepthPass(){return (GAPIOP)0;}

    virtual void SetStencilFuncSeparate(GAPIFUNC frontfunc, GAPIFUNC backfunc, uint32t ref, uint32t mask){}
    virtual void SetStencilOpSeparate(bool frontface, GAPIOP fail, GAPIOP zfail, GAPIOP pass){}
    virtual void SetStencilMaskSeparate(bool frontface, uint32t mask){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Raster Functions
    virtual void SetRect(int32t x1, int32t y1, int32t x2, int32t y2){}
    virtual void SetRect(float x1, float y1, float x2, float y2){}
    virtual void SetRasterPos(int32t x, int32t y){}
    virtual void SetRasterPos(float x, float y){}
    virtual void SetColor(ubyte red, ubyte green, ubyte blue, ubyte alpha){}
    virtual void SetColor(ubyte color[4]){}
    virtual void SetColor(unsigned color){}
    virtual void DrawBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, const ubyte *bitmap){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Matrix Handling
    virtual void SetProjMatrix(const float matrix[16]){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Viewport Setting
    virtual void SetViewport(int x, int y, int width, int height){}
    virtual void GetViewport(int rect[4]){}
        

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Alpha Test
    virtual void EnableAlphaTest(bool flag){}
    virtual bool IsAlphaTestEnabled(){return false;}
    virtual void SetAlphaFunc(GAPIFUNC func, float ref){}
    virtual GAPIFUNC GetAlphaTestFunc(){return (GAPIFUNC)0;}
    virtual float GetAlphaTestRef(){return 0.0f;}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Alpha To Coverage Test
    virtual void EnableSampleAlphaToMask(bool flag){}
    virtual bool IsSampleAlphaToMaskEnabled(){return false;}
    virtual void SetSampleCoverage(float val, bool invert){}
    virtual void GetSampleCoverage(float &val, bool &invert){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Color Blending
    virtual void EnableColorBlend(bool flag){}
    virtual bool IsColorBlendEnabled(){return false;}
    virtual void SetBlendFunc(GAPIBLENDOP src, GAPIBLENDOP dest){}
    virtual GAPIBLENDOP GetSrcBlendFunc(){return (GAPIBLENDOP)0;}
    virtual GAPIBLENDOP GetDestBlendFunc(){return (GAPIBLENDOP)0;}

    virtual void SetBlendEquation(GAPIBLENDFUNC mode){}
    virtual void SetBlendEquationSeparate(GAPIBLENDFUNC modeRGB, GAPIBLENDFUNC modeAlpha){}
    virtual void SetBlendFuncSeparate(GAPIBLENDOP srcRGB, GAPIBLENDOP destRGB, GAPIBLENDOP srcAlpha, GAPIBLENDOP destAlpha){}

    virtual void SetBlendColor(float red, float green, float blue, float alpha){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Setting Framebuffer Clear Color
    virtual void SetClearColor(float red, float green, float blue, float alpha){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Setting Polygon Fill Mode
    virtual void SetFillMode(GAPIFILLMODE mode){}
    //////////////////////////////////////////////////////////////////////////////////////////////
    // Setting Polygon Cull Mode
    virtual void SetCullMode(bool CullFace,bool CCW){}
    //////////////////////////////////////////////////////////////////////////////////////////////
    // Setting Shading Mode (Gouraud or Flat Shading)
    virtual void SetShadingMode(bool bsmooth){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Occlusion Query Managment Functions
    virtual uint32t CreateQueryObject(){return 0;}
    virtual bool    DeleteQueryObject(uint32t objidx){return false;}
    virtual void    BeginQuery(uint32t objidx){}
    virtual void    EndQuery(){}
    virtual uint32t GetQueryObjects(uint32t objidx){return 0;}
    virtual bool    QueryStarted(){return false;}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Texture Managment Functions
    virtual uint32t CreateTexture(uint32t width, uint32t height, uint32t depth, uint32t flags, TEXFMT fmt, const void **data){return 0;}
    virtual  bool   DeleteTexture(uint32t texidx){return false;}

    virtual bool    UpdateTexture(uint32t texidx, uint32t miplevel, uint32t face, uint32t align, uint32t xoff, uint32t yoff, uint32t zoff, const void *data){return false;}

    virtual bool    BindRenderTarget(uint32t texidx, uint32t face=0){return false;}
    virtual bool    UnbindRenderTarget(){return false;}

    virtual bool    SetTexFilter(uint32t texidx, TEXFLT flt){return false;}
   virtual  bool    GetTexFilter(uint32t texidx, TEXFLT &flt){return false;}

    virtual bool    SetTexAnisotropy(uint32t texidx, uint32t val){return false;}
    virtual bool    GetTexAnisotropy(uint32t texidx, uint32t &val){return false;}

    virtual bool    SetTexAddr(uint32t texidx, TEXADDR addrS, TEXADDR addrT, TEXADDR addrR){return false;}
    virtual bool    GetTexAddr(uint32t texidx, TEXADDR &addrS, TEXADDR &addrT, TEXADDR &addrR){return false;}

    virtual bool    GetTexWidth(uint32t texidx, uint32t &width){return false;}
    virtual bool    GetTexHeight(uint32t texidx, uint32t &height){return false;}
    virtual bool    GetTexDepth(uint32t texidx, uint32t &depth){return false;}

    virtual bool    SetTexture(uint32t texIdx, uint32t tex_unit){return false;}
    virtual bool    SetTexture(const uint32t *pTexIdx, uint32t tex_unit_num){return false;}
    virtual void    DisableTextures(){}

    virtual uint32t CreateTextureSampler(){return 0;}
    virtual bool    DeleteTextureSampler(uint32t sampleridx){return false;}
    virtual bool    SetTexSamplerFilter(uint32t sampleridx, TEXFLT flt){return false;}
    virtual bool    SetTexSamplerMinFilter(uint32t sampleridx, TEXFLT flt){return false;}
    virtual bool    SetTexSamplerMagFilter(uint32t sampleridx, TEXFLT flt){return false;}
    virtual bool    SetTexSamplerAddr(uint32t sampleridx, TEXADDR wrap){return false;}
    virtual bool    SetTexSamplerAddr(uint32t sampleridx, TEXADDR sWrap, TEXADDR tWrap, TEXADDR rWrap){return false;}
    virtual bool    SetTexSamplerMinLod(uint32t sampleridx, int32t lod){return false;}
    virtual bool    SetTexSamplerMaxLod(uint32t sampleridx, int32t lod){return false;}
    virtual bool    SetTexSamplerMaxAnisotroty(uint32t sampleridx, int32t anisotropy){return false;}
    virtual bool    SetTexSamplerCompare(uint32t sampleridx, GAPIFUNCTION func, bool modeon){return false;}

    virtual bool    SetTextureSampler(uint32t texidx, uint32t texunit){return false;}
    virtual bool    SetTextureSamplers(const uint32t *pTexIdx, uint32t texunitcnt){return false;}
    virtual void    DisableTextureSamplers(){}

    virtual void    EnableTexEnvStatesCheck(bool flag){}
    
    //////////////////////////////////////////////////////////////////////////////////////////////
    // Shaders Management Functions
    virtual uint32t CreateShader(const char *strshader){return 0;}
    virtual bool    DeleteShader(uint32t shaderidx){return false;}

    virtual uint32t CreateShaderParamsGroup(uint32t reservesize=0){return 0;}
    virtual bool    DeleteShaderParamsGroup(uint32t shaderidx){return false;}
    virtual uint32t AddShaderParam(uint32t groupidx, const char *name, GAPIUNIFORMTYPE type, const void *data){return 0;}
    virtual bool    UpdateShaderParam(uint32t groupidx, uint32t paramidx, const void *data){return false;}
    virtual bool    SetShaderParams(uint32t shaderidx, uint32t groupidx, uint32t commgroupidx=0){return false;}
    virtual uint32t GetShaderParamIndex(uint32t groupidx, const char *name){return 0;}

    virtual uint32t CreateUniformBuffer(GAPIBUFFERUSAGE usage, uint32t bufsize, const void *data){return 0;}
    virtual bool    AddUniformBlocks(uint32t shaderidx, uint32t *bufidx, const char **names, uint32t count){return false;}

    virtual bool    SetShader(uint32t shaderidx){return false;}


    virtual bool    SetShaderUniform(GAPIUNIFORMTYPE type, const char *name, const void *data){return false;}
    virtual bool    SetShaderProgramUniform(uint32t shaderidx, GAPIUNIFORMTYPE type, const char *name, const void *data){return false;}
    virtual bool    SetShaderUniforms(GAPIUNIFORMDATA *data, uint32t count){return false;}
    virtual bool    SetShaderProgramUniforms(uint32t shaderidx, GAPIUNIFORMDATA *data, uint32t count){return false;}

    virtual uint32t GetUniformBlockSize(uint32t shaderidx, const char *blockname){return 0;}
    virtual bool    GetActiveUniformInfo(uint32t shaderidx, GAPIACTIVEUNIFORMTYPE type, const char **names, uint32t *pvalues, uint32t count){return false;}
    virtual bool    SetUniformBlockBinding(uint32t shaderidx, const char *blockname, uint32t bindingpoint){return false;}
    //--virtual uint32t GetUniformBufferBindingPoint(uint32t bufidx){return 0xffffffff;}
    virtual bool    SetUniformBufferBinding(uint32t bufidx, uint32t bindpoint){return false;}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Fragment Data Location
    virtual void SetFragDataLocation(uint32t shaderidx, uint32t colornumber, const char *name){}
    virtual void SetFragDataLocation(uint32t shaderidx, uint32t *colorsnumbers, const char **names, uint32t count){}
    virtual uint32t GetFragDataLocation(uint32t shaderidx, const char *name){return 0xffffffff;}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Blend Func Extended
    virtual void SetFragDataLocationIndexed(uint32t shaderidx, uint32t colornumber, uint32t index, const char *name){}
    virtual void SetFragDataLocationIndexed(uint32t shaderidx, uint32t *colorsnumbers, uint32t *indices, const char **names, uint32t count){}
    virtual uint32t GetFragDataIndex(uint32t shaderidx, const char *name){return 0xffffffff;}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Vertex Object Managment Functions
    virtual uint32t CreateVertexBuffer(GAPIBUFFERUSAGE usage, uint32t bufsize, const void *data){return 0;}
    virtual bool UpdateVertexBuffer(uint32t bufid, uint32t first, uint32t size, const void *data){return false;}
    virtual bool DeleteVertexBuffer(uint32t bufid){return false;}
    virtual bool SetVertexBuffer(uint32t bufferid){return false;}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Direct Vertex Attribute Management Functions
    virtual void    SetVertexAttribPointer(uint32t index, uint32t size, GAPIDATATYPE type, bool normalize, uint32t stride, const void *pointer) {}
    virtual void    SetVertexAttribBuffer(uint32t attribidx, uint32t size, GAPIDATATYPE type, bool normalize, uint32t stride, uint32t offset, uint32t bufidx) {}
    virtual void    SetVertexAttribPointerI(uint32t stream, uint32t size, GAPIDATATYPE type, uint32t stride, const void *pointer){}
    virtual void    SetVertexAttribBufferI(uint32t stream, uint32t size, GAPIDATATYPE type, uint32t stride, uint32t offset, uint32t buf_idx){}
    virtual void    SetVertexAttribPointerL(uint32t stream, uint32t size, uint32t stride, const void *pointer){}
    virtual void    SetVertexAttribBufferL(uint32t stream, uint32t size, uint32t stride, uint32t offset, uint32t buf_idx){}
    virtual void    SetVertexAttribBuffers(GAPIVERTATTRIBDATA *attribbuf, uint32t count){}
    virtual uint32t GetVertexAttribLocation(uint32t shaderidx, const char *attribname){return 0;}
    virtual void    SetIndexBuffer(uint32t buf_idx){}
    virtual void    DisableVertexAttribPointers(){}

    //////////////////////////////////////////////////////////////////////////////////////////////
    // Direct Drawing Functions
    virtual void    DrawArrays(GAPIPRIMITIVETYPE mode, uint32t first, uint32t count){}
    virtual void    DrawElements(GAPIPRIMITIVETYPE mode, uint32t count, GAPIDATATYPE type, const void *indices){}

    virtual void    MultiDrawArrays(GAPIPRIMITIVETYPE mode, const uint32t *first, const uint32t *count, uint32t drawcount){}
    virtual void    MultiDrawElements(GAPIPRIMITIVETYPE mode, const uint32t *count, GAPIDATATYPE type, const void *const *indices, uint32t drawcount){}

    virtual void    DrawRangeElements(GAPIPRIMITIVETYPE mode, uint32t start, uint32t end, uint32t count, GAPIDATATYPE type, const void *indices){}
    
    virtual void    DrawArraysInstanced(GAPIPRIMITIVETYPE mode, uint32t first, uint32t count, uint32t instance_count){}
    virtual void    DrawElementsInstanced(GAPIPRIMITIVETYPE mode, uint32t count, GAPIDATATYPE type, const void *indices, uint32t instancecount){}

    virtual void    DrawArraysInderict(GAPIPRIMITIVETYPE mode, const void *indirect){}
    virtual void    DrawElementsIndirect(GAPIPRIMITIVETYPE mode, GAPIDATATYPE type, const void *indirect){}

    virtual void    DrawArraysInstancedBaseInstance(GAPIPRIMITIVETYPE mode, uint32t first, uint32t count, uint32t instancecount, uint32t baseinstance){}
    virtual void    MultiDrawArraysIndirect(GAPIPRIMITIVETYPE mode, const void *indirect, uint32t drawcount, uint32t stride){}
    virtual void    DrawElementsInstancedBaseInstance(GAPIPRIMITIVETYPE mode, uint32t count, GAPIDATATYPE type, const void *indices, uint32t instancecount, uint32t baseinstance){}

    virtual void    DrawElementsBaseVertex(GAPIPRIMITIVETYPE mode, uint32t count, GAPIDATATYPE type, const void *indices, int32t basevertex){}
    virtual void    DrawRangeElementsBaseVertex(GAPIPRIMITIVETYPE mode, uint32t start, uint32t end, uint32t count, GAPIDATATYPE type, const void *indices, int32t basevertex){}
    virtual void    DrawElementsInstancedBaseVertex(GAPIPRIMITIVETYPE mode, uint32t count, GAPIDATATYPE type, const void *indices, uint32t instancecount, int32t basevertex){}
    virtual void    DrawElementsInstancedBaseVertexBaseInstance(GAPIPRIMITIVETYPE mode, uint32t count, GAPIDATATYPE type, const void *indices, uint32t instancecount, int32t basevertex, uint32t baseinstance){}
    virtual void    MultiDrawElementsBaseVertex(GAPIPRIMITIVETYPE mode, const uint32t *count, GAPIDATATYPE type, const void *const *indices, uint32t drawcount, int32t *basevertex){}

};

/////////////////////////////////////////////////////////////////////////////////////////////
*/
